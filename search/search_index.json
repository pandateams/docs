{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bem vindo! \u00b6 Aqui voc\u00ea pode encontrar todas as documenta\u00e7\u00f5es da equipe PandaTeams","title":"Home"},{"location":"#bem-vindo","text":"Aqui voc\u00ea pode encontrar todas as documenta\u00e7\u00f5es da equipe PandaTeams","title":"Bem vindo!"},{"location":"documentacao/","text":"Documenta\u00e7\u00e3o \u00b6 Todas as documenta\u00e7\u00f5es de neg\u00f3cio e infraestrutura tendem a ser centralizadas em um \u00fanico local, para que a equipe saiba exatamente o que se passa com o projeto e que fique registrado nossos passos para o futuro. Framework de documenta\u00e7\u00e3o \u00b6 O framework utilizado para gerar as documenta\u00e7\u00f5es \u00e9 o mkdocs , pacote do pr\u00f3prio python que disponibiliza um servidor de documenta\u00e7\u00e3o pronto para uso. Para saber mais sobre o mkdocs: https://www.mkdocs.org/ Como funciona? O mkdocs utiliza arquivos markdown para subir as documenta\u00e7\u00f5es, ou seja todas as documenta\u00e7\u00f5es devem ser escritas dentro da pasta docs e apontadas no arquivo mkdocs.yml fonte : https://www.mkdocs.org/img/initial-layout.png Como escrever documenta\u00e7\u00f5es? \u00b6 Para escrever documenta\u00e7\u00f5es \u00e9 necess\u00e1rio escrever documentos em Markdown, para saber mais sobre markdown: https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet N\u00e3o \u00e9 necess\u00e1rio nada demais para escrever arquivos markdown, assim como HTML, Markdown \u00e9 uma linguagem de marca\u00e7\u00e3o, ou seja basta um editor de texto simples. Alguns editores de texto tem plugins que possibilitam uma preview do documento, por\u00e9m, nesse exato momento eu (Lucas Siqueira), estou utilizando o aplicativo mobile Markor. Depois de escrever, \u00e9 necess\u00e1rio que estes arquivos estejam dentro da pasta docs e que sejam apontados dentro do nav no arquivo mkdocs.yml , identificando o nome da sess\u00e3o e o arquivo que ser\u00e1 utilizado. site_name : Site Exemplo nav : - Home : index.md - Sobre : about.md Para testar, instale os requisitos utilizando: $ pip install -r requirements.txt build a documenta\u00e7\u00e3o com: $ cd locapy $ mkdocs build E depois subir o servidor: # Estamos subindo o servidor na porta 8001 # para que n\u00e3o haja conflitos com o Django $ mkdocs serve --dev-addr = 127 .0.0.1:8001 Subindo no GitPages \u00b6 Para que a documenta\u00e7\u00e3o fique exposta para toda a equipe, estamos utilizando o GitPages do Github para hospedar nosso servidor de documenta\u00e7\u00e3o, o mkdocs tem integra\u00e7\u00e3o com o GitPages o que torna tudo mais f\u00e1cil. Para realizar o deploy das modifica\u00e7\u00f5es para o GitPages utilize o comando: mkdocs gh-deploy Feito isso, \u00e9 s\u00f3 conferir a documenta\u00e7\u00e3o.","title":"Documenta\u00e7\u00f5es"},{"location":"documentacao/#documentacao","text":"Todas as documenta\u00e7\u00f5es de neg\u00f3cio e infraestrutura tendem a ser centralizadas em um \u00fanico local, para que a equipe saiba exatamente o que se passa com o projeto e que fique registrado nossos passos para o futuro.","title":"Documenta\u00e7\u00e3o"},{"location":"documentacao/#framework-de-documentacao","text":"O framework utilizado para gerar as documenta\u00e7\u00f5es \u00e9 o mkdocs , pacote do pr\u00f3prio python que disponibiliza um servidor de documenta\u00e7\u00e3o pronto para uso. Para saber mais sobre o mkdocs: https://www.mkdocs.org/ Como funciona? O mkdocs utiliza arquivos markdown para subir as documenta\u00e7\u00f5es, ou seja todas as documenta\u00e7\u00f5es devem ser escritas dentro da pasta docs e apontadas no arquivo mkdocs.yml fonte : https://www.mkdocs.org/img/initial-layout.png","title":"Framework de documenta\u00e7\u00e3o"},{"location":"documentacao/#como-escrever-documentacoes","text":"Para escrever documenta\u00e7\u00f5es \u00e9 necess\u00e1rio escrever documentos em Markdown, para saber mais sobre markdown: https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet N\u00e3o \u00e9 necess\u00e1rio nada demais para escrever arquivos markdown, assim como HTML, Markdown \u00e9 uma linguagem de marca\u00e7\u00e3o, ou seja basta um editor de texto simples. Alguns editores de texto tem plugins que possibilitam uma preview do documento, por\u00e9m, nesse exato momento eu (Lucas Siqueira), estou utilizando o aplicativo mobile Markor. Depois de escrever, \u00e9 necess\u00e1rio que estes arquivos estejam dentro da pasta docs e que sejam apontados dentro do nav no arquivo mkdocs.yml , identificando o nome da sess\u00e3o e o arquivo que ser\u00e1 utilizado. site_name : Site Exemplo nav : - Home : index.md - Sobre : about.md Para testar, instale os requisitos utilizando: $ pip install -r requirements.txt build a documenta\u00e7\u00e3o com: $ cd locapy $ mkdocs build E depois subir o servidor: # Estamos subindo o servidor na porta 8001 # para que n\u00e3o haja conflitos com o Django $ mkdocs serve --dev-addr = 127 .0.0.1:8001","title":"Como escrever documenta\u00e7\u00f5es?"},{"location":"documentacao/#subindo-no-gitpages","text":"Para que a documenta\u00e7\u00e3o fique exposta para toda a equipe, estamos utilizando o GitPages do Github para hospedar nosso servidor de documenta\u00e7\u00e3o, o mkdocs tem integra\u00e7\u00e3o com o GitPages o que torna tudo mais f\u00e1cil. Para realizar o deploy das modifica\u00e7\u00f5es para o GitPages utilize o comando: mkdocs gh-deploy Feito isso, \u00e9 s\u00f3 conferir a documenta\u00e7\u00e3o.","title":"Subindo no GitPages"},{"location":"fluxo-desenvolvimento/","text":"Fluxo de Trabalho \u00b6 A equipe optou por utilizar algumas cerim\u00f4nias \u00e1geis e o quadro Kanban para acompanhar o trabalho, realizando Sprints de 2 semanas. Pap\u00e9is \u00b6 Os pap\u00e9is dentro da equipe s\u00e3o: PO - Por defini\u00e7\u00e3o, deveria haver algu\u00e9m que fizesse esse papel, por\u00e9m devido a falta de recursos a equipe optou que todos n\u00f3s fiz\u00e9ssemos o papel de PO. Scrum Master - Lucas Siqueira Time de desenvolvimento - Bruno Lima, Lucas Ara\u00fajo e Oseas Fernandes Time de neg\u00f3cios - C\u00e9sar Augusto, Lucas Siqueira e Vinicius Tavares Cerim\u00f4nias \u00b6 As cerim\u00f4nias utilizadas s\u00e3o, por ondem cronol\u00f3gica: Planning - Cerim\u00f4nia em que a equipe realiza o planejamento do que ser\u00e1 realizado dentro da SPRINT. Se houver necessidade essa reuni\u00e3o ser\u00e1 para que a equipe discuta os crit\u00e9rios de aceite, descri\u00e7\u00e3o, pontua\u00e7\u00e3o e tasks das est\u00f3rias de usu\u00e1rio. Daily - Cerim\u00f4nia di\u00e1ria realizada no hor\u00e1rio combinado pela equipe, a ideia \u00e9 que o tempo seja utilizado para que cada integrante diga o que fez no dia anterior e o que fez/ir\u00e1 fazer no dia. Discuss\u00f5es t\u00e9cnicas podem ser feitas ap\u00f3s a daily . Review - Cerim\u00f4nia realizada ap\u00f3s a conclus\u00e3o da est\u00f3ria, o respons\u00e1vel pela est\u00f3ria apresentar\u00e1 para a equipe, se for aprovada entrar\u00e1 na fila para deploy, sen\u00e3o o desenvolvimento continua. Quadro Kanban \u00b6 O quadro Kanban \u00e9 utilizado para ter uma vis\u00e3o macro do andamento do processo de trabalho, a ferramenta escolhida foi o Trello, dispon\u00edvel em: https://trello.com/b/Regw3bNx/locapy-sprint-n%C3%A3o-definida BACKLOG DO PRODUTO - Representa todas as est\u00f3rias escritas para o produto, o backlog \u00e9 priorizado, as est\u00f3rias do topo s\u00e3o as mais priorit\u00e1rias. BACKLOG DA SPRINT - Representa todas as est\u00f3rias que ser\u00e3o feitas na Sprint atual, todas as est\u00f3rias que entrarem para o backlog da sprint precisam ser revisadas pela equipe. EM DESENVOLVIMENTO - Representa todas as est\u00f3rias que est\u00e3o sendo desenvolvidas no momento. CODE REVIEW - Representa todas as est\u00f3rias que terminaram o desenvolvimento e est\u00e3o dispon\u00edveis para a equipe revisar o c\u00f3digo. A revis\u00e3o \u00e9 feita pelo Github e precisa de 2 aprova\u00e7\u00f5es para estar pronta para a revis\u00e3o. Aten\u00e7\u00e3o: N\u00e3o realize o Merge nessa etapa REVIS\u00c3O - Representa a etapa em que o respons\u00e1vel pelo desenvolvimento realiza o deploy no ambiente de DEV e apresenta para a equipe, caso a decis\u00e3o seja un\uff83\uff62nime, o c\u00f3digo entra na fila para deploy. Aten\u00e7\u00e3o: N\u00e3o realize o Merge nessa etapa AGUARDANDO DEPLOY - Representa a etapa em que a est\u00f3ria est\u00e1 aguardando para fechar uma release e realizar o deploy, \u00e9 importante que o PR esteja aberto no Github e a label identificando essa etapa. Aten\u00e7\u00e3o: N\u00e3o realize o Merge nessa etapa DEPLOY - Representa a etapa em que uma release ser\u00e1 fechada e o c\u00f3digo entrar\u00e1 em produ\u00e7\u00e3o, \u00e9 importante criar uma tag no Git com o n\u00famero da vers\u00e3o. Gitflow \u00b6 Branchs \u00b6 Utilizamos o Git como ferramenta de versionamento de c\u00f3digo e o Github para hospedar o c\u00f3digo desenvolvido. Defini\u00e7\u00f5es de Branch's: master - Branch utilizado somente para funcionalidades j\u00e1 testadas e aprovadas pelo cliente. develop - Branch que cont\u00e9m o c\u00f3digo em desenvolvimento da equipe, todas as novas Branchs ser\u00e3o criadas a partir de develop. feature - Demais funcionalidades que est\u00e3o sendo desenvolvidas, os nomes das Branchs que representam novas funcionalidades ser\u00e3o correspondentes ao c\u00f3digo das est\u00f3rias do Kanban. Ex: feature/pt-01 bugfix - Corre\u00e7\u00f5es de bugs que est\u00e3o sendo desenvolvidas, os nomes das Branchs que representam corre\u00e7\u00f5es de problemas ser\u00e3o correspondentes ao c\u00f3digo das est\u00f3rias do Kanban, caso n\u00e3o existam est\u00f3rias o nome deve condizer a qual problema o c\u00f3digo resolver\u00e1. Ex: bugfix/pt-03 Ex: bugfix/correcao-bug-cadastro Sempre que uma nova branch \u00e9 criada, deve ser criada a partir de develop, pois o c\u00f3digo n\u00e3o deve conter depend\u00eancias de outras funcionalidades que estejam sendo desenvolvidas. Quando o c\u00f3digo \u00e9 colocado para revis\u00e3o, apenas o que \u00e9 pertinente a est\u00f3ria em quest\u00e3o deve ser mergeado. fonte : https://www.bitbull.it/blog/git-flow-come-funziona/gitflow-1.png Trabalhe na branch correta \u00b6 Para visualizar todas as branches: git branch -a Utilize uma branch j\u00e1 existente: git checkout <nome_da_branch> Ou crie uma nova para a sua funcionalidade: git checkout -b <nome_da_branch> <Exemplo> git checkout -b feature/pt-01 Certifique-se de que sua branch est\u00e1 atualizada: git pull origin <nome_da_branch_mais_att> <Exemplo> git pull origin develop Pull Requests \u00b6 Sempre que um c\u00f3digo est\u00e1 sendo desenvolvido deve-se criar um PR(Pull Request) com o c\u00f3digo e nome da est\u00f3ria, descrevendo o que est\u00e1 sendo desenvolvido. Exemplo: [PT-01] Eu como locador, quero cadastrar minhas salas, de modo que meus locat\u00e1rios consigam obter informa\u00e7\u00f5es para alugar O respons\u00e1vel pela tarefa deve abrir o PR e ser respons\u00e1vel pela manuten\u00e7\u00e3o dele at\u00e9 que o c\u00f3digo seja mergeado. Labels \u00b6 Labels s\u00e3o r\u00f3tulos que descrevem o andamento do c\u00f3digo no fluxo de trabalho da equipe relacionando Github com o quadro Kanban: Em desenvolvimento - Label que relaciona a situa\u00e7\u00e3o do c\u00f3digo com a coluna de mesmo nome no Kanban. C\u00f3digos com essa Label n\u00e3o podem ser revisados at\u00e9 que o respons\u00e1vel atualize a situa\u00e7\u00e3o. Code Review - Label que relaciona a situa\u00e7\u00e3o do c\u00f3digo com a coluna de mesmo nome no Kanban. C\u00f3digos com essa Label devem ser revisados por no m\u00ednimo 2 membros da equipe que n\u00e3o participaram do desenvolvimento da solu\u00e7\u00e3o. Se o PR for aprovado N\u00c3O realize o merge. Revis\u00e3o - Label que relaciona a situa\u00e7\u00e3o do c\u00f3digo com a coluna de mesmo nome no Kanban. C\u00f3digos com essa Label devem ser revisados a n\u00edvel de usu\u00e1rio pelos membros da equipe, portanto, o respons\u00e1vel pela tarefa deve fazer o deploy da solu\u00e7\u00e3o no ambiente de desenvolvimento. Se a solu\u00e7\u00e3o for aprovada N\u00c3O realize o merge. Aguardando Deploy - Label que relaciona a situa\u00e7\u00e3o do c\u00f3digo com a coluna de mesmo nome no Kanban. C\u00f3digos com essa Label devem permanecer assim at\u00e9 que a equipe decida realizar o empacotamento de uma nova release. N\u00c3O realize o merge. Deploy - Label que relaciona a situa\u00e7\u00e3o do c\u00f3digo com a coluna de mesmo nome no Kanban. C\u00f3digos com essa Label devem ser mergeados em develop para gerar uma nova release. Code Review \u00b6 Para garantir que o c\u00f3digo foi revisado, temos uma trava no Github que s\u00f3 permite que um c\u00f3digo entre em develop depois que for aprovado por 2 membros da equipe. Ao revisar o c\u00f3digo o desenvolvedor deve se atentar com: Se o c\u00f3digo est\u00e1 funcional Se o c\u00f3digo est\u00e1 com uma boa qualidade Se segue as conven\u00e7\u00f5es de PEP8 (python) Se \u00e9 pythonico, no caso do backend. Se as fun\u00e7\u00f5es est\u00e3o documentadas (Numpy) Se todos os requisitos acima estiverem dentro do esperado, o desenvolvedor deve aprovar a solu\u00e7\u00e3o. Tags \u00b6 Tags dever\u00e3o ser geradas quando uma nova release est\u00e1 sendo gerada, ou seja quando c\u00f3digos desenvolvidos pela equipe se tornar\u00e3o dispon\u00edveis para uso em produ\u00e7\u00e3o. Ap\u00f3s a est\u00f3ria for aprovada para o deploy, criamos releases utilizando o seguinte versionamento sem\u00e2ntico: MAJOR.MINOR.PATCH Vers\u00e3o Maior(MAJOR): Quando fizer mudan\u00e7as incompat\u00edveis na API. Vers\u00e3o Menor(MINOR): Quando adicionar funcionalidades mantendo compatibilidade. Vers\u00e3o de Corre\u00e7\u00e3o(PATCH): Quando corrigir falhas mantendo compatibilidade. Exemplo: Come\u00e7amos o sistema e desenvolvemos uma funcionalidade de login. TAG: 0.1.0 Exemplo: Corrigimos um bug no envio da senha do login. TAG: 0.1.1 Exemplo: Mudamos a vers\u00e3o do Django de 1.x para 2.x, portanto o sistema quebrou por compatibilidade de vers\u00e3o. TAG: 1.1.1 Para ver mais: https://semver.org/lang/pt-BR/ Trabalhando com tags: Listando tags: git tag Criando tags: git tag <numero-versao> Detalhando uma tag: git show <numero-versao> Subindo tags para o Github: git push origin --tags","title":"Fluxo de Desenvolvimento"},{"location":"fluxo-desenvolvimento/#fluxo-de-trabalho","text":"A equipe optou por utilizar algumas cerim\u00f4nias \u00e1geis e o quadro Kanban para acompanhar o trabalho, realizando Sprints de 2 semanas.","title":"Fluxo de Trabalho"},{"location":"fluxo-desenvolvimento/#papeis","text":"Os pap\u00e9is dentro da equipe s\u00e3o: PO - Por defini\u00e7\u00e3o, deveria haver algu\u00e9m que fizesse esse papel, por\u00e9m devido a falta de recursos a equipe optou que todos n\u00f3s fiz\u00e9ssemos o papel de PO. Scrum Master - Lucas Siqueira Time de desenvolvimento - Bruno Lima, Lucas Ara\u00fajo e Oseas Fernandes Time de neg\u00f3cios - C\u00e9sar Augusto, Lucas Siqueira e Vinicius Tavares","title":"Pap\u00e9is"},{"location":"fluxo-desenvolvimento/#cerimonias","text":"As cerim\u00f4nias utilizadas s\u00e3o, por ondem cronol\u00f3gica: Planning - Cerim\u00f4nia em que a equipe realiza o planejamento do que ser\u00e1 realizado dentro da SPRINT. Se houver necessidade essa reuni\u00e3o ser\u00e1 para que a equipe discuta os crit\u00e9rios de aceite, descri\u00e7\u00e3o, pontua\u00e7\u00e3o e tasks das est\u00f3rias de usu\u00e1rio. Daily - Cerim\u00f4nia di\u00e1ria realizada no hor\u00e1rio combinado pela equipe, a ideia \u00e9 que o tempo seja utilizado para que cada integrante diga o que fez no dia anterior e o que fez/ir\u00e1 fazer no dia. Discuss\u00f5es t\u00e9cnicas podem ser feitas ap\u00f3s a daily . Review - Cerim\u00f4nia realizada ap\u00f3s a conclus\u00e3o da est\u00f3ria, o respons\u00e1vel pela est\u00f3ria apresentar\u00e1 para a equipe, se for aprovada entrar\u00e1 na fila para deploy, sen\u00e3o o desenvolvimento continua.","title":"Cerim\u00f4nias"},{"location":"fluxo-desenvolvimento/#quadro-kanban","text":"O quadro Kanban \u00e9 utilizado para ter uma vis\u00e3o macro do andamento do processo de trabalho, a ferramenta escolhida foi o Trello, dispon\u00edvel em: https://trello.com/b/Regw3bNx/locapy-sprint-n%C3%A3o-definida BACKLOG DO PRODUTO - Representa todas as est\u00f3rias escritas para o produto, o backlog \u00e9 priorizado, as est\u00f3rias do topo s\u00e3o as mais priorit\u00e1rias. BACKLOG DA SPRINT - Representa todas as est\u00f3rias que ser\u00e3o feitas na Sprint atual, todas as est\u00f3rias que entrarem para o backlog da sprint precisam ser revisadas pela equipe. EM DESENVOLVIMENTO - Representa todas as est\u00f3rias que est\u00e3o sendo desenvolvidas no momento. CODE REVIEW - Representa todas as est\u00f3rias que terminaram o desenvolvimento e est\u00e3o dispon\u00edveis para a equipe revisar o c\u00f3digo. A revis\u00e3o \u00e9 feita pelo Github e precisa de 2 aprova\u00e7\u00f5es para estar pronta para a revis\u00e3o. Aten\u00e7\u00e3o: N\u00e3o realize o Merge nessa etapa REVIS\u00c3O - Representa a etapa em que o respons\u00e1vel pelo desenvolvimento realiza o deploy no ambiente de DEV e apresenta para a equipe, caso a decis\u00e3o seja un\uff83\uff62nime, o c\u00f3digo entra na fila para deploy. Aten\u00e7\u00e3o: N\u00e3o realize o Merge nessa etapa AGUARDANDO DEPLOY - Representa a etapa em que a est\u00f3ria est\u00e1 aguardando para fechar uma release e realizar o deploy, \u00e9 importante que o PR esteja aberto no Github e a label identificando essa etapa. Aten\u00e7\u00e3o: N\u00e3o realize o Merge nessa etapa DEPLOY - Representa a etapa em que uma release ser\u00e1 fechada e o c\u00f3digo entrar\u00e1 em produ\u00e7\u00e3o, \u00e9 importante criar uma tag no Git com o n\u00famero da vers\u00e3o.","title":"Quadro Kanban"},{"location":"fluxo-desenvolvimento/#gitflow","text":"","title":"Gitflow"},{"location":"fluxo-desenvolvimento/#branchs","text":"Utilizamos o Git como ferramenta de versionamento de c\u00f3digo e o Github para hospedar o c\u00f3digo desenvolvido. Defini\u00e7\u00f5es de Branch's: master - Branch utilizado somente para funcionalidades j\u00e1 testadas e aprovadas pelo cliente. develop - Branch que cont\u00e9m o c\u00f3digo em desenvolvimento da equipe, todas as novas Branchs ser\u00e3o criadas a partir de develop. feature - Demais funcionalidades que est\u00e3o sendo desenvolvidas, os nomes das Branchs que representam novas funcionalidades ser\u00e3o correspondentes ao c\u00f3digo das est\u00f3rias do Kanban. Ex: feature/pt-01 bugfix - Corre\u00e7\u00f5es de bugs que est\u00e3o sendo desenvolvidas, os nomes das Branchs que representam corre\u00e7\u00f5es de problemas ser\u00e3o correspondentes ao c\u00f3digo das est\u00f3rias do Kanban, caso n\u00e3o existam est\u00f3rias o nome deve condizer a qual problema o c\u00f3digo resolver\u00e1. Ex: bugfix/pt-03 Ex: bugfix/correcao-bug-cadastro Sempre que uma nova branch \u00e9 criada, deve ser criada a partir de develop, pois o c\u00f3digo n\u00e3o deve conter depend\u00eancias de outras funcionalidades que estejam sendo desenvolvidas. Quando o c\u00f3digo \u00e9 colocado para revis\u00e3o, apenas o que \u00e9 pertinente a est\u00f3ria em quest\u00e3o deve ser mergeado. fonte : https://www.bitbull.it/blog/git-flow-come-funziona/gitflow-1.png","title":"Branchs"},{"location":"fluxo-desenvolvimento/#trabalhe-na-branch-correta","text":"Para visualizar todas as branches: git branch -a Utilize uma branch j\u00e1 existente: git checkout <nome_da_branch> Ou crie uma nova para a sua funcionalidade: git checkout -b <nome_da_branch> <Exemplo> git checkout -b feature/pt-01 Certifique-se de que sua branch est\u00e1 atualizada: git pull origin <nome_da_branch_mais_att> <Exemplo> git pull origin develop","title":"Trabalhe na branch correta"},{"location":"fluxo-desenvolvimento/#pull-requests","text":"Sempre que um c\u00f3digo est\u00e1 sendo desenvolvido deve-se criar um PR(Pull Request) com o c\u00f3digo e nome da est\u00f3ria, descrevendo o que est\u00e1 sendo desenvolvido. Exemplo: [PT-01] Eu como locador, quero cadastrar minhas salas, de modo que meus locat\u00e1rios consigam obter informa\u00e7\u00f5es para alugar O respons\u00e1vel pela tarefa deve abrir o PR e ser respons\u00e1vel pela manuten\u00e7\u00e3o dele at\u00e9 que o c\u00f3digo seja mergeado.","title":"Pull Requests"},{"location":"fluxo-desenvolvimento/#labels","text":"Labels s\u00e3o r\u00f3tulos que descrevem o andamento do c\u00f3digo no fluxo de trabalho da equipe relacionando Github com o quadro Kanban: Em desenvolvimento - Label que relaciona a situa\u00e7\u00e3o do c\u00f3digo com a coluna de mesmo nome no Kanban. C\u00f3digos com essa Label n\u00e3o podem ser revisados at\u00e9 que o respons\u00e1vel atualize a situa\u00e7\u00e3o. Code Review - Label que relaciona a situa\u00e7\u00e3o do c\u00f3digo com a coluna de mesmo nome no Kanban. C\u00f3digos com essa Label devem ser revisados por no m\u00ednimo 2 membros da equipe que n\u00e3o participaram do desenvolvimento da solu\u00e7\u00e3o. Se o PR for aprovado N\u00c3O realize o merge. Revis\u00e3o - Label que relaciona a situa\u00e7\u00e3o do c\u00f3digo com a coluna de mesmo nome no Kanban. C\u00f3digos com essa Label devem ser revisados a n\u00edvel de usu\u00e1rio pelos membros da equipe, portanto, o respons\u00e1vel pela tarefa deve fazer o deploy da solu\u00e7\u00e3o no ambiente de desenvolvimento. Se a solu\u00e7\u00e3o for aprovada N\u00c3O realize o merge. Aguardando Deploy - Label que relaciona a situa\u00e7\u00e3o do c\u00f3digo com a coluna de mesmo nome no Kanban. C\u00f3digos com essa Label devem permanecer assim at\u00e9 que a equipe decida realizar o empacotamento de uma nova release. N\u00c3O realize o merge. Deploy - Label que relaciona a situa\u00e7\u00e3o do c\u00f3digo com a coluna de mesmo nome no Kanban. C\u00f3digos com essa Label devem ser mergeados em develop para gerar uma nova release.","title":"Labels"},{"location":"fluxo-desenvolvimento/#code-review","text":"Para garantir que o c\u00f3digo foi revisado, temos uma trava no Github que s\u00f3 permite que um c\u00f3digo entre em develop depois que for aprovado por 2 membros da equipe. Ao revisar o c\u00f3digo o desenvolvedor deve se atentar com: Se o c\u00f3digo est\u00e1 funcional Se o c\u00f3digo est\u00e1 com uma boa qualidade Se segue as conven\u00e7\u00f5es de PEP8 (python) Se \u00e9 pythonico, no caso do backend. Se as fun\u00e7\u00f5es est\u00e3o documentadas (Numpy) Se todos os requisitos acima estiverem dentro do esperado, o desenvolvedor deve aprovar a solu\u00e7\u00e3o.","title":"Code Review"},{"location":"fluxo-desenvolvimento/#tags","text":"Tags dever\u00e3o ser geradas quando uma nova release est\u00e1 sendo gerada, ou seja quando c\u00f3digos desenvolvidos pela equipe se tornar\u00e3o dispon\u00edveis para uso em produ\u00e7\u00e3o. Ap\u00f3s a est\u00f3ria for aprovada para o deploy, criamos releases utilizando o seguinte versionamento sem\u00e2ntico: MAJOR.MINOR.PATCH Vers\u00e3o Maior(MAJOR): Quando fizer mudan\u00e7as incompat\u00edveis na API. Vers\u00e3o Menor(MINOR): Quando adicionar funcionalidades mantendo compatibilidade. Vers\u00e3o de Corre\u00e7\u00e3o(PATCH): Quando corrigir falhas mantendo compatibilidade. Exemplo: Come\u00e7amos o sistema e desenvolvemos uma funcionalidade de login. TAG: 0.1.0 Exemplo: Corrigimos um bug no envio da senha do login. TAG: 0.1.1 Exemplo: Mudamos a vers\u00e3o do Django de 1.x para 2.x, portanto o sistema quebrou por compatibilidade de vers\u00e3o. TAG: 1.1.1 Para ver mais: https://semver.org/lang/pt-BR/ Trabalhando com tags: Listando tags: git tag Criando tags: git tag <numero-versao> Detalhando uma tag: git show <numero-versao> Subindo tags para o Github: git push origin --tags","title":"Tags"},{"location":"locapy-arquitetura/","text":"Arquitetura \u00b6 A Arquitetura escolhida para o desenvolvimento do projeto foi: Dispon\u00edvel em: Link para o LucidChart","title":"Arquitetura"},{"location":"locapy-arquitetura/#arquitetura","text":"A Arquitetura escolhida para o desenvolvimento do projeto foi: Dispon\u00edvel em: Link para o LucidChart","title":"Arquitetura"},{"location":"locapy-banco-de-dados/","text":"Banco de dados \u00b6 O SGBD utilizado ser\u00e1 o PostgreSQL e o diagrama de classes utilizado no Django ORM ser\u00e1: Dispon\u00edvel em: Link para o LucidChart","title":"Banco de dados"},{"location":"locapy-banco-de-dados/#banco-de-dados","text":"O SGBD utilizado ser\u00e1 o PostgreSQL e o diagrama de classes utilizado no Django ORM ser\u00e1: Dispon\u00edvel em: Link para o LucidChart","title":"Banco de dados"},{"location":"projetos/","text":"Projetos \u00b6 Abaixo est\u00e3o listados os projetos no qual a PandaTeams faz parte: Locapy - Solu\u00e7\u00f5es para aluguel e gerenciamento de salas comerciais","title":"Nossos Projetos"},{"location":"projetos/#projetos","text":"Abaixo est\u00e3o listados os projetos no qual a PandaTeams faz parte: Locapy - Solu\u00e7\u00f5es para aluguel e gerenciamento de salas comerciais","title":"Projetos"},{"location":"sobre-locapy/","text":"Sobre \u00b6 O mercado imobili\u00e1rio vem crescendo nos \u00faltimos anos em S\u00e3o Paulo, portanto a disponibiliza\u00e7\u00e3o de salas comerciais tamb\u00e9m cresceu concomitante com milhares de espa\u00e7os ociosos em escolas particulares, empresas e universidades. A PandaTeams idealizou duas solu\u00e7\u00f5es integradas que buscam atender aos dois p\u00fablicos, locat\u00e1rios que querem alugar e locadores que t\u00eam espa\u00e7os para serem alugados. S\u00e3o elas: o gerenciador de salas e o portal de aluguel de salas. O gerenciador de salas, \u00e9 a solu\u00e7\u00e3o online que busca dar ao locador o controle total sobre os seus espa\u00e7os atrav\u00e9s de agenda de eventos e relat\u00f3rios customizados. O portal de aluguel de salas, \u00e9 a solu\u00e7\u00e3o que intermedia a comunica\u00e7\u00e3o de quem quer alugar com quem tem um espa\u00e7o para ser alugado, oferecendo uma plataforma web que disponibiliza o canal para que a comunica\u00e7\u00e3o seja realizada. Al\u00e9m disso, o portal d\u00e1 ao locador relat\u00f3rios customizados sobre o desempenho de suas salas. A ideia \u00e9 que as duas solu\u00e7\u00f5es sejam integradas, ou seja, o locador que utilizar o gerenciador de salas consiga facilmente divulgar no portal de aluguel, proporcionando uma experi\u00eancia completa ao locador e oferecendo um mix de espa\u00e7os para o locat\u00e1rio.","title":"Sobre o projeto"},{"location":"sobre-locapy/#sobre","text":"O mercado imobili\u00e1rio vem crescendo nos \u00faltimos anos em S\u00e3o Paulo, portanto a disponibiliza\u00e7\u00e3o de salas comerciais tamb\u00e9m cresceu concomitante com milhares de espa\u00e7os ociosos em escolas particulares, empresas e universidades. A PandaTeams idealizou duas solu\u00e7\u00f5es integradas que buscam atender aos dois p\u00fablicos, locat\u00e1rios que querem alugar e locadores que t\u00eam espa\u00e7os para serem alugados. S\u00e3o elas: o gerenciador de salas e o portal de aluguel de salas. O gerenciador de salas, \u00e9 a solu\u00e7\u00e3o online que busca dar ao locador o controle total sobre os seus espa\u00e7os atrav\u00e9s de agenda de eventos e relat\u00f3rios customizados. O portal de aluguel de salas, \u00e9 a solu\u00e7\u00e3o que intermedia a comunica\u00e7\u00e3o de quem quer alugar com quem tem um espa\u00e7o para ser alugado, oferecendo uma plataforma web que disponibiliza o canal para que a comunica\u00e7\u00e3o seja realizada. Al\u00e9m disso, o portal d\u00e1 ao locador relat\u00f3rios customizados sobre o desempenho de suas salas. A ideia \u00e9 que as duas solu\u00e7\u00f5es sejam integradas, ou seja, o locador que utilizar o gerenciador de salas consiga facilmente divulgar no portal de aluguel, proporcionando uma experi\u00eancia completa ao locador e oferecendo um mix de espa\u00e7os para o locat\u00e1rio.","title":"Sobre"},{"location":"sobre-nos/","text":"Sobre n\u00f3s \u00b6 No Brasil, existem in\u00fameros neg\u00f3cios que dependem de processos manuais, tecnologias ultrapassadas e intermediadores, o que dificulta e encarece as atividades de pessoas e empresas. Por isso, n\u00f3s sabemos que o cuidado com a experi\u00eancia do usu\u00e1rio e a tecnologia podem resolver problemas complexos. Assumimos a empresa na transi\u00e7\u00e3o de 2018 para 2019, mas nossa exist\u00eancia vem de muito antes de nos descobrirmos como startup, a PandaTeams \u00e9 o resultado dos sonhos de 6 pessoas obstinadas em aproveitar as oportunidades de fazer do mundo um lugar melhor.","title":"Sobre n\u00f3s"},{"location":"sobre-nos/#sobre-nos","text":"No Brasil, existem in\u00fameros neg\u00f3cios que dependem de processos manuais, tecnologias ultrapassadas e intermediadores, o que dificulta e encarece as atividades de pessoas e empresas. Por isso, n\u00f3s sabemos que o cuidado com a experi\u00eancia do usu\u00e1rio e a tecnologia podem resolver problemas complexos. Assumimos a empresa na transi\u00e7\u00e3o de 2018 para 2019, mas nossa exist\u00eancia vem de muito antes de nos descobrirmos como startup, a PandaTeams \u00e9 o resultado dos sonhos de 6 pessoas obstinadas em aproveitar as oportunidades de fazer do mundo um lugar melhor.","title":"Sobre n\u00f3s"}]}