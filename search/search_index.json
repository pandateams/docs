{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bem vindo! \u00b6 Aqui voc\u00ea pode encontrar todas as documenta\u00e7\u00f5es da equipe PandaTeams","title":"Home"},{"location":"#bem-vindo","text":"Aqui voc\u00ea pode encontrar todas as documenta\u00e7\u00f5es da equipe PandaTeams","title":"Bem vindo!"},{"location":"documentacao/","text":"DOCKER \u00b6","title":"Documenta\u00e7\u00f5es"},{"location":"documentacao/#docker","text":"","title":"DOCKER"},{"location":"fluxo-desenvolvimento/","text":"Fluxo de Trabalho \u00b6 A equipe optou por utilizar algumas cerim\u00f4nias \u00e1geis e o quadro Kanban para acompanhar o trabalho, realizando Sprints de 2 semanas. Cerim\u00f4nias \u00b6 As cerim\u00f4nias utilizadas s\u00e3o, por ondem cronol\u00f3gica: Planning - Cerim\u00f4nia em que a equipe realiza o planejamento do que ser\u00e1 realizado dentro da SPRINT. Se houver necessidade essa reuni\u00e3o ser\u00e1 para que a equipe discuta os crit\u00e9rios de aceite, descri\u00e7\u00e3o, pontua\u00e7\u00e3o e tasks das est\u00f3rias de usu\u00e1rio. Daily - Cerim\u00f4nia di\u00e1ria realizada no hor\u00e1rio combinado pela equipe, a ideia \u00e9 que o tempo seja utilizado para que cada integrante diga o que fez no dia anterior e o que fez/ir\u00e1 fazer no dia. Discuss\u00f5es t\u00e9cnicas podem ser feitas ap\u00f3s a daily . Review - Cerim\u00f4nia realizada ap\u00f3s a conclus\u00e3o da est\u00f3ria, o respons\u00e1vel pela est\u00f3ria apresentar\u00e1 para a equipe, se for aprovada entrar\u00e1 na fila para deploy, sen\u00e3o o desenvolvimento continua. Quadro Kanban \u00b6 O quadro Kanban \u00e9 utilizado para ter uma vis\u00e3o macro do andamento do processo de trabalho, a ferramenta escolhida foi o Trello, dispon\u00edvel em: https://trello.com/b/Regw3bNx/locapy-sprint-n%C3%A3o-definida BACKLOG DO PRODUTO - Representa todas as est\u00f3rias escritas para o produto, o backlog \u00e9 priorizado, as est\u00f3rias do topo s\u00e3o as mais priorit\u00e1rias. BACKLOG DA SPRINT - Representa todas as est\u00f3rias que ser\u00e3o feitas na Sprint atual, todas as est\u00f3rias que entrarem para o backlog da sprint precisam ser revisadas pela equipe. EM DESENVOLVIMENTO - Representa todas as est\u00f3rias que est\u00e3o sendo desenvolvidas no momento. CODE REVIEW - Representa todas as est\u00f3rias que terminaram o desenvolvimento e est\u00e3o dispon\u00edveis para a equipe revisar o c\u00f3digo. A revis\u00e3o \u00e9 feita pelo Github e precisa de 2 aprova\u00e7\u00f5es para estar pronta para a revis\u00e3o. Aten\u00e7\u00e3o: N\u00e3o realize o Merge nessa etapa REVIS\u00c3O - Representa a etapa em que o respons\u00e1vel pelo desenvolvimento realiza o deploy no ambiente de DEV e apresenta para a equipe, caso a decis\u00e3o seja un\uff83\uff62nime, o c\u00f3digo entra na fila para deploy. Aten\u00e7\u00e3o: N\u00e3o realize o Merge nessa etapa AGUARDANDO DEPLOY - Representa a etapa em que a est\u00f3ria est\u00e1 aguardando para fechar uma release e realizar o deploy, \u00e9 importante que o PR esteja aberto no Github e a label identificando essa etapa. Aten\u00e7\u00e3o: N\u00e3o realize o Merge nessa etapa DEPLOY - Representa a etapa em que uma release ser\u00e1 fechada e o c\u00f3digo entrar\u00e1 em produ\u00e7\u00e3o, \u00e9 importante criar uma tag no Git com o n\u00famero da vers\u00e3o. Github \u00b6 master - Branch utilizado somente para funcionalidades j\u00e1 testadas e aprovadas pelo cliente develop - Branch que consiste no desenvolvimento atual da equipe features - Demais funcionalidades que est\u00e3o sendo desenvolvidas fonte : https://www.bitbull.it/blog/git-flow-come-funziona/gitflow-1.png SEMPRE : * Para novas funcionalidades utilize: feature/nome_da_func * Para melhorias no codigo: bugfix/nome_da_correcao Trabalhe na branch correta \u00b6 Para visualizar todas as branches: git branch -a Utilize uma branch j\u00e1 existente: git checkout <nome_da_branch> Ou crie uma nova para a sua funcionalidade: git checkout -b <nome_da_branch> <Exemplo> git checkout -b DBconnection Certifique-se de que sua branch est\u00e1 atualizada: git pull origin <nome_da_branch_mais_att> <Exemplo> git pull origin develop Rodando o projeto local \u00b6 Adicione suas credenciais \u00b6 Para trabalhar com o projeto, crie um arquivo chamado .env na raiz do diretorio, e adicione as credenciais fornecidas pela equipe de desenvolvimento . Utilizando Docker \u00b6 Docker \u00e9 uma tecnologia que fornece containers que isolam processos, com a ajuda do Docker Compose \u00e9 poss\u00edvel orquestrar containers e subir aplica\u00e7\u00f5es complexas com poucos comandos. Instala\u00e7\u00e3o do Docker no Windows: https://docs.docker.com/docker-for-windows/install/ Instala\u00e7\u00e3o do Docker Compose no Linux: https://docs.docker.com/compose/install/ Iniciando o projeto Atualize o repositorio local git pull origin develop Para iniciar o projeto: docker-compose up","title":"Fluxo de Desenvolvimento"},{"location":"fluxo-desenvolvimento/#fluxo-de-trabalho","text":"A equipe optou por utilizar algumas cerim\u00f4nias \u00e1geis e o quadro Kanban para acompanhar o trabalho, realizando Sprints de 2 semanas.","title":"Fluxo de Trabalho"},{"location":"fluxo-desenvolvimento/#cerimonias","text":"As cerim\u00f4nias utilizadas s\u00e3o, por ondem cronol\u00f3gica: Planning - Cerim\u00f4nia em que a equipe realiza o planejamento do que ser\u00e1 realizado dentro da SPRINT. Se houver necessidade essa reuni\u00e3o ser\u00e1 para que a equipe discuta os crit\u00e9rios de aceite, descri\u00e7\u00e3o, pontua\u00e7\u00e3o e tasks das est\u00f3rias de usu\u00e1rio. Daily - Cerim\u00f4nia di\u00e1ria realizada no hor\u00e1rio combinado pela equipe, a ideia \u00e9 que o tempo seja utilizado para que cada integrante diga o que fez no dia anterior e o que fez/ir\u00e1 fazer no dia. Discuss\u00f5es t\u00e9cnicas podem ser feitas ap\u00f3s a daily . Review - Cerim\u00f4nia realizada ap\u00f3s a conclus\u00e3o da est\u00f3ria, o respons\u00e1vel pela est\u00f3ria apresentar\u00e1 para a equipe, se for aprovada entrar\u00e1 na fila para deploy, sen\u00e3o o desenvolvimento continua.","title":"Cerim\u00f4nias"},{"location":"fluxo-desenvolvimento/#quadro-kanban","text":"O quadro Kanban \u00e9 utilizado para ter uma vis\u00e3o macro do andamento do processo de trabalho, a ferramenta escolhida foi o Trello, dispon\u00edvel em: https://trello.com/b/Regw3bNx/locapy-sprint-n%C3%A3o-definida BACKLOG DO PRODUTO - Representa todas as est\u00f3rias escritas para o produto, o backlog \u00e9 priorizado, as est\u00f3rias do topo s\u00e3o as mais priorit\u00e1rias. BACKLOG DA SPRINT - Representa todas as est\u00f3rias que ser\u00e3o feitas na Sprint atual, todas as est\u00f3rias que entrarem para o backlog da sprint precisam ser revisadas pela equipe. EM DESENVOLVIMENTO - Representa todas as est\u00f3rias que est\u00e3o sendo desenvolvidas no momento. CODE REVIEW - Representa todas as est\u00f3rias que terminaram o desenvolvimento e est\u00e3o dispon\u00edveis para a equipe revisar o c\u00f3digo. A revis\u00e3o \u00e9 feita pelo Github e precisa de 2 aprova\u00e7\u00f5es para estar pronta para a revis\u00e3o. Aten\u00e7\u00e3o: N\u00e3o realize o Merge nessa etapa REVIS\u00c3O - Representa a etapa em que o respons\u00e1vel pelo desenvolvimento realiza o deploy no ambiente de DEV e apresenta para a equipe, caso a decis\u00e3o seja un\uff83\uff62nime, o c\u00f3digo entra na fila para deploy. Aten\u00e7\u00e3o: N\u00e3o realize o Merge nessa etapa AGUARDANDO DEPLOY - Representa a etapa em que a est\u00f3ria est\u00e1 aguardando para fechar uma release e realizar o deploy, \u00e9 importante que o PR esteja aberto no Github e a label identificando essa etapa. Aten\u00e7\u00e3o: N\u00e3o realize o Merge nessa etapa DEPLOY - Representa a etapa em que uma release ser\u00e1 fechada e o c\u00f3digo entrar\u00e1 em produ\u00e7\u00e3o, \u00e9 importante criar uma tag no Git com o n\u00famero da vers\u00e3o.","title":"Quadro Kanban"},{"location":"fluxo-desenvolvimento/#github","text":"master - Branch utilizado somente para funcionalidades j\u00e1 testadas e aprovadas pelo cliente develop - Branch que consiste no desenvolvimento atual da equipe features - Demais funcionalidades que est\u00e3o sendo desenvolvidas fonte : https://www.bitbull.it/blog/git-flow-come-funziona/gitflow-1.png SEMPRE : * Para novas funcionalidades utilize: feature/nome_da_func * Para melhorias no codigo: bugfix/nome_da_correcao","title":"Github"},{"location":"fluxo-desenvolvimento/#trabalhe-na-branch-correta","text":"Para visualizar todas as branches: git branch -a Utilize uma branch j\u00e1 existente: git checkout <nome_da_branch> Ou crie uma nova para a sua funcionalidade: git checkout -b <nome_da_branch> <Exemplo> git checkout -b DBconnection Certifique-se de que sua branch est\u00e1 atualizada: git pull origin <nome_da_branch_mais_att> <Exemplo> git pull origin develop","title":"Trabalhe na branch correta"},{"location":"fluxo-desenvolvimento/#rodando-o-projeto-local","text":"","title":"Rodando o projeto local"},{"location":"fluxo-desenvolvimento/#adicione-suas-credenciais","text":"Para trabalhar com o projeto, crie um arquivo chamado .env na raiz do diretorio, e adicione as credenciais fornecidas pela equipe de desenvolvimento .","title":"Adicione suas credenciais"},{"location":"fluxo-desenvolvimento/#utilizando-docker","text":"Docker \u00e9 uma tecnologia que fornece containers que isolam processos, com a ajuda do Docker Compose \u00e9 poss\u00edvel orquestrar containers e subir aplica\u00e7\u00f5es complexas com poucos comandos. Instala\u00e7\u00e3o do Docker no Windows: https://docs.docker.com/docker-for-windows/install/ Instala\u00e7\u00e3o do Docker Compose no Linux: https://docs.docker.com/compose/install/ Iniciando o projeto Atualize o repositorio local git pull origin develop Para iniciar o projeto: docker-compose up","title":"Utilizando Docker"}]}